---
- name: Setup Ansible Controller
  hosts: localhost
  gather_facts: no
  become: no
  vars:
   site: product
  vars_files:
   ../vars/main.yaml
  pre_tasks:
    - name: Import loadJsons.yaml
      import_tasks: ~/mes-core-infrastructure/playbooks/includes/loadJsons.yaml
  tasks:
    - name: Deploy Required Tools
      become: yes
      become_user: root
      become_method: sudo
      block:
      - name: Deploy Python Packages
        pip: 
         name: requests
         state: present
         extra_args: --user


    - name: Deploy mes-esx-config-backups Repo
      block:
        - name: Clone mes-esx-config-backups repo
          git:
            repo: git@gitlab.product.healthinteractive.net:rblundell/mes-esx-config-backups.git
            dest: ~/mes-esx-config-backups
            accept_hostkey: yes
            update: yes
            clone: yes
        - name: Create Per Site Directories in mes-esx-config-backups repo
          loop: [configs,facts]
          file:
           path: "~/mes-esx-config-backups/{{site}}/{{item}}"
           state: directory
        - name: Create Branch
          shell: chdir=~/mes-esx-config-backups git checkout -b {{site}}


- name: Setup ESX Hosts
  hosts: esxHosts
  gather_facts: no
  become: no
  vars:
   site: product
  vars_files: [../vars/main.yaml]

  pre_tasks:
    - name: Import loadJsons.yaml
      import_tasks: ~/mes-core-infrastructure/playbooks/includes/loadJsons.yaml

  tasks:
    - name: Setup ESX Hosts
      delegate_to: localhost
      block:
        - name: Gather vmware host facts
          register: host_facts
          vmware_host_facts:
            hostname: "{{siteSecrets[site].vsphereIP}}"
            username: "{{sites[site].vsphere.username}}"
            password: "{{siteSecrets[site].vsphereAdminPassword}}"
            esxi_hostname: '{{ inventory_hostname }}'
            validate_certs: False

        - debug: var=host_facts

        - name: Save the ESXi configuration to mes-esx-config-backups repo
          register: esxConfig
          vmware_cfg_backup:
            validate_certs: False
            hostname: "{{siteSecrets[site].vsphereIP}}"
            username: "{{sites[site].vsphere.username}}"
            password: "{{siteSecrets[site].vsphereAdminPassword}}"
            esxi_hostname: '{{ inventory_hostname }}'
            state: saved
            dest: "~/mes-esx-config-backups/{{site}}"

        - debug: var=esxConfig


#    - name: Push to origin.

#      shell: "git push origin branch"

        - meta: end_play

        - name: Create ESX Datastore Storage Directory
          delegate_to: '{{bastionHost}}'
          register: storageDir
          vcenter_folder:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            datacenter_name: '{{datacenter}}'
            folder_type: vm
            folder_name: '{{storageDirectoryName}}'
            state: present

        - name: Deploy OVF 
          delegate_to: '{{bastionHost}}'
          register: ovf
          vmware_deploy_ovf:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            datacenter: '{{vcenter_datacenter}}'
            cluster: '{{vcenter_cluster}}'
            datastore: '{{vcenter_datastore}}'
            name: '{{OVF.name}}'
            power_on: '{{OVF.power_on}}'
            folder: '{{storageDirectoryName}}'
            ovf: '{{OVF.path}}'
            disk_provisioning: '{{disk_provisioning}}'
            inject_ovf_env: '{{OVF.inject_ovf_env}}'
            wait_for_ip_address: '{{OVF.wait_for_ip_address}}'
            wait: '{{OVF.wait}}'
        - debug: var=ovvf

        - name: Export OVF
          delegate_to: '{{bastionHost}}'
          register: exportOvf
          vmware_export_ovf:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            datacenter: '{{vcenter_datacenter}}'
            name: '{{ ExportedVM.name }}'
            export_with_images: '{{ExportedVM.export_with_images}}'
            export_dir: '{{ExportedVM.dir}}'
        - debug: var=exportOvf


        - name: Change virtual machine's boot order and related parameters
          delegate_to: '{{bastionHost}}'
          register: manageBootOrder
          vmware_guest_boot_manager:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            datacenter: '{{vcenter_datacenter}}'
            name: '{{ BootManagedVM.name }}'
            boot_delay: '{{ BootManagedVM.boot_delay }}'
            enter_bios_setup: '{{ BootManagedVM.enter_bios_setup }}'
            boot_retry_enabled: '{{ BootManagedVM.boot_retry_enabled }}'
            boot_retry_delay: '{{ BootManagedVM.boot_retry_delay }}'
            boot_firmware: '{{ BootManagedVM.boot_firmware }}'
            secure_boot_enabled: '{{ BootManagedVM.secure_boot_enabled }}'
            boot_order: '{{bootOrder}}'
        - debug: var=manageBootOrder


        - name: Add hardened attribute to VM
          delegate_to: '{{bastionHost}}'
          register: h
          vmware_guest_custom_attribute_defs:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            name: '{{ BootManagedVM.name }}'
            state: present
            attribute_key: hardened
        - debug: var=h


        - name: Set hardened attribute on VM
          delegate_to: '{{bastionHost}}'
          register: hh
          vmware_guest_custom_attributes:
            validate_certs: '{{validateEsxCerts}}'
            hostname: '{{ vcenter_hostname }}'
            username: '{{ vcenter_username }}'
            password: '{{ vcenter_password }}'
            name: '{{ HardenedVM.name }}'
            state: present
            attributes:
                - name: hardened
                  value: yes
                - name: hardened_timestamp
                  value: '{{HardenedVM.timestamp}}'
        - debug: var=hh


